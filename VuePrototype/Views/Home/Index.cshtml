@model VuePrototype.Models.GroupShellModel

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">
<style>
    input, select {
        margin: 3px 3px 1px 3px;
        border-radius: 4px;
        font-size: 14px;
        box-shadow: 0 0 0 1px slategrey;
        border-left: solid 6px #f8f8ff;
        height: 1.6rem;
        box-sizing: border-box;
        padding-left: 5px;
        border: 0;
    }

        input[type=checkbox] {
            box-shadow: 0 0 0 0;
            border: 0;
            height: auto;
        }

    .required {
        border-left: solid 6px #52a4ca;
    }

    .valid {
        border-left: 6px solid white;
    }

    .error {
        border-left: solid 6px #d60000;
    }

    .group {
        margin: .1rem .5rem;
        display: flex;
        flex-direction: column;
        max-width: 20rem;
    }

    .address-lines {
        display: flex;
        flex-flow: column wrap;
    }

    .btn-plus {
        height: 36px;
        width: 36px;
    }

    .btn-x {
        height: 36px;
        width: 36px;
    }

    .subsidiary {
        display: flex;
        flex-flow: row wrap;
        align-items: flex-end;
        margin-top: 1rem;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: black 1px solid;
        max-width: 43rem;
    }

    .btn-remove-subsidiary {
        margin-left: 1rem;
    }

    h3 {
        margin-top: 2rem;
    }

    .tooltip {
  display: block !important;
  pointer-events: none;
  padding: 4px;
  z-index: 10000;
}

.tooltip .tooltip-inner {
  background: black;
  color: white;
  border-radius: 16px;
  padding: 5px 10px 4px;
}

.tooltip[aria-hidden='true'] {
  visibility: hidden;
  opacity: 0;
  transition: opacity .15s, visibility .15s;
}

.tooltip[aria-hidden='false'] {
  visibility: visible;
  opacity: 1;
  transition: opacity .15s;
}
</style>

<div id="app-7">
    <label-input id="GroupName" v-model="GroupName" :required.bool="true" :valid="isValidGroupName" error-message="'Test'"></label-input>
    <label-select id="BluePartner" :options="BluePartnerOptions" v-model="BluePartner" :required.bool="true" ></label-select>
    <label-checkbox id="PolicyStateSameAsTaxState" v-model="PolicyStateSameAsTaxState" v-on:input="copyTaxStateToPolicyState"></label-checkbox>
    <label-select id="TaxState" :options="States" v-model="TaxState" v-on:input="copyTaxStateToPolicyState"></label-select>
    <label-select id="PolicyState" :options="States" v-model="PolicyState" :disabled="PolicyStateSameAsTaxState"></label-select>
    <h3>Organization Contact Address</h3>
    <v-address v-model="OrganizationContactAddress" :states="States" address-id-prefix="OrganizationContactAddress" v-on:input="copyOrganizationAddressToBenefitAddress"></v-address>
    <label-checkbox label="Benefit Address same as Organization Address" id="BenefitAddressSameAsOrganization" v-model="BenefitAddressSameAsOrganization" v-on:input="copyOrganizationAddressToBenefitAddress"></label-checkbox>
    <h3>Benefit Contact Address</h3>
    <v-address v-model="BenefitContactAddress" :states="States" address-id-prefix="BenefitContactAddress" v-if="shouldShowBenefitContactAddress"></v-address>
    <h3>Subsidiaries</h3>
    <subsidiary v-for="(subsidiary, index) in Subsidiaries" :index="index" :key="subsidiary.id" v-model="Subsidiaries[index]" v-on:remove="removeSubsidiary(index)" :states="States"></subsidiary>
    <button id="AddSubsidiaryButton" type="button" class="btn btn-primary btn-plus" v-on:click="addSubsidiary">+</button>
    <button id="SubmitButton" type="button" class="btn btn-success" v-on:click="submitGroupShell">Submit</button>
</div>

<script>
    var groupShellModel = @Html.Raw(Model.JSONString());
</script>
@Scripts.Render("~/bundles/GroupShell")